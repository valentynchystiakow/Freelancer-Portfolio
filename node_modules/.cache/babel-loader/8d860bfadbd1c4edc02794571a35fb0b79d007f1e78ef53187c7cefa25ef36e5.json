{"ast":null,"code":"var _jsxFileName = \"D:\\\\Courses\\\\FullStackLearning\\\\Projects\\\\Freelancer-Portfolio-main\\\\src\\\\components\\\\btnDarkMode\\\\btnDarkMode.js\",\n  _s = $RefreshSig$();\n// import useState hook for using states in component\nimport { useEffect } from 'react';\n// import images\nimport sun from '../../img/icons/sun.svg';\nimport moon from '../../img/icons/moon.svg';\n// import styles\nimport './style.css';\n// import custom function hook\nimport { useLocalStorage } from '../../utils/uselocalstorage';\nimport detectDarkMode from '../../utils/detectDarkMode';\n\n// File with switch mode button component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BtnDarkMode = () => {\n  _s();\n  const [darkMode, setDarkMode] = useLocalStorage('darkMode', detectDarkMode);\n\n  // useEffect hook which will change mode depending on it's class, [darkMode] - default value\n  useEffect(() => {\n    if (darkMode === 'dark') {\n      document.body.classList.add('dark');\n    } else {\n      document.body.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  // useEffect hook which will react on system changes and will change mode depending on time is right now\n  useEffect(() => {\n    window.matchMedia('(prefers-color-scheme:dark)').addEventListener('change', event => {\n      const newColorScheme = event.matches ? 'dark' : 'light';\n      setDarkMode(newColorScheme);\n    });\n  }, [setDarkMode]);\n\n  // Switching mode function \n  const toggleDarkMode = () => {\n    setDarkMode(currentValue => {\n      return currentValue === 'light' ? 'dark' : 'light';\n    });\n  };\n\n  // constants with class values\n  const btnNormal = 'dark-mode-btn';\n  const btnActive = 'dark-mode-btn dark-mode-btn--active';\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: darkMode === 'dark' ? btnActive : btnNormal,\n    onClick: toggleDarkMode,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: sun,\n      alt: \"Light mode\",\n      className: \"dark-mode-btn__icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: moon,\n      alt: \"Dark mode\",\n      className: \"dark-mode-btn__icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(BtnDarkMode, \"Yqw5BS/tZF/JuWWC8CIp4elFiMw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = BtnDarkMode;\nexport default BtnDarkMode;\nvar _c;\n$RefreshReg$(_c, \"BtnDarkMode\");","map":{"version":3,"names":["useEffect","sun","moon","useLocalStorage","detectDarkMode","jsxDEV","_jsxDEV","BtnDarkMode","_s","darkMode","setDarkMode","document","body","classList","add","remove","window","matchMedia","addEventListener","event","newColorScheme","matches","toggleDarkMode","currentValue","btnNormal","btnActive","className","onClick","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Courses/FullStackLearning/Projects/Freelancer-Portfolio-main/src/components/btnDarkMode/btnDarkMode.js"],"sourcesContent":["// import useState hook for using states in component\nimport {useEffect} from 'react';\n// import images\nimport sun from '../../img/icons/sun.svg';\nimport moon from '../../img/icons/moon.svg';\n// import styles\nimport './style.css';\n// import custom function hook\nimport { useLocalStorage } from '../../utils/uselocalstorage';\nimport detectDarkMode from '../../utils/detectDarkMode';\n\n// File with switch mode button component\nconst BtnDarkMode = () => {\n    \n    const [darkMode,setDarkMode] = useLocalStorage('darkMode',detectDarkMode);\n  \n\n    // useEffect hook which will change mode depending on it's class, [darkMode] - default value\n    useEffect(()=>{\n       if (darkMode === 'dark') {\n        document.body.classList.add('dark')\n       } else {\n        document.body.classList.remove('dark')\n       }\n    },[darkMode])\n\n    // useEffect hook which will react on system changes and will change mode depending on time is right now\n    useEffect(()=> {\n            window\n            .matchMedia('(prefers-color-scheme:dark)')\n            .addEventListener('change',(event)=>{\n                const newColorScheme = event.matches ? 'dark' : 'light';\n                setDarkMode(newColorScheme)\n            })\n    },[setDarkMode])\n\n    // Switching mode function \n    const toggleDarkMode = () => {\n        setDarkMode((currentValue)=>{\n            return currentValue === 'light' ? 'dark' : 'light';\n        })\n    }\n\n    // constants with class values\n    const btnNormal = 'dark-mode-btn';\n    const btnActive = 'dark-mode-btn dark-mode-btn--active';\n\n    return (\n        \n         <button className={darkMode === 'dark' ? btnActive : btnNormal} onClick = {toggleDarkMode}> \n            <img src={sun} alt=\"Light mode\" className=\"dark-mode-btn__icon\"/>\n            <img src={moon} alt=\"Dark mode\" className=\"dark-mode-btn__icon\"/>\n        </button>\n        \n    )\n}\n\n\nexport default BtnDarkMode;"],"mappings":";;AAAA;AACA,SAAQA,SAAS,QAAO,OAAO;AAC/B;AACA,OAAOC,GAAG,MAAM,yBAAyB;AACzC,OAAOC,IAAI,MAAM,0BAA0B;AAC3C;AACA,OAAO,aAAa;AACpB;AACA,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAOC,cAAc,MAAM,4BAA4B;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB,MAAM,CAACC,QAAQ,EAACC,WAAW,CAAC,GAAGP,eAAe,CAAC,UAAU,EAACC,cAAc,CAAC;;EAGzE;EACAJ,SAAS,CAAC,MAAI;IACX,IAAIS,QAAQ,KAAK,MAAM,EAAE;MACxBE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IACpC,CAAC,MAAM;MACNH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACvC;EACH,CAAC,EAAC,CAACN,QAAQ,CAAC,CAAC;;EAEb;EACAT,SAAS,CAAC,MAAK;IACPgB,MAAM,CACLC,UAAU,CAAC,6BAA6B,CAAC,CACzCC,gBAAgB,CAAC,QAAQ,EAAEC,KAAK,IAAG;MAChC,MAAMC,cAAc,GAAGD,KAAK,CAACE,OAAO,GAAG,MAAM,GAAG,OAAO;MACvDX,WAAW,CAACU,cAAc,CAAC;IAC/B,CAAC,CAAC;EACV,CAAC,EAAC,CAACV,WAAW,CAAC,CAAC;;EAEhB;EACA,MAAMY,cAAc,GAAGA,CAAA,KAAM;IACzBZ,WAAW,CAAEa,YAAY,IAAG;MACxB,OAAOA,YAAY,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACtD,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,eAAe;EACjC,MAAMC,SAAS,GAAG,qCAAqC;EAEvD,oBAEKnB,OAAA;IAAQoB,SAAS,EAAEjB,QAAQ,KAAK,MAAM,GAAGgB,SAAS,GAAGD,SAAU;IAACG,OAAO,EAAIL,cAAe;IAAAM,QAAA,gBACvFtB,OAAA;MAAKuB,GAAG,EAAE5B,GAAI;MAAC6B,GAAG,EAAC,YAAY;MAACJ,SAAS,EAAC;IAAqB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjE5B,OAAA;MAAKuB,GAAG,EAAE3B,IAAK;MAAC4B,GAAG,EAAC,WAAW;MAACJ,SAAS,EAAC;IAAqB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAGjB,CAAC;AAAA1B,EAAA,CA3CKD,WAAW;EAAA,QAEkBJ,eAAe;AAAA;AAAAgC,EAAA,GAF5C5B,WAAW;AA8CjB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}